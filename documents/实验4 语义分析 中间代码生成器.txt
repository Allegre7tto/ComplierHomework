1
实验 4 语义分析和中间代码生成器-赋值表达式
要求
参考课本 6.4.2、6.4.3 和 7.3，实现递归下降翻译器。
注意
数据结构：
四元式：结构体
四元式序列：结构体数组
跳转语句的四元式的第 4 个域需回填。
翻译模式
1. 赋值语句的翻译
说明：
设文法符号为 X，其属性如下：
§ X.place：存放 X 值的变量的名字；
§ X.inArray：指向符号表中相应标识符表项的指针，若不使用符号表，则 X.inArray 即为标识符。
§ 函数 emit(	)：生成四元式语句；
§ 函数 newtemp(	):	 生成一个临时变量的名字，如 t1。
测试：
输入： a=6/b+5*c-d;
输出：
0: /,	6,	b,	t1
1: *,	5,	c,	t2
2: +,	t1,	t2,	t3
3: -,	t3,	d,	t4
4: =,	t4,	-,	a
文法 语义动作
stmts⟶ stmt
			 rest0
{rest0.inNextlist=stmt.nextlist}
{stmts.nextlist=rest0.nextlist}
rest0	⟶ m stmt	
			 rest01
{backpatch(rest0.inNextlist,	m.quad);
rest01.inNextlist=stmt.nextlist}
{rest0.nextlist=rest01.nextlist}
2
rest0 ⟶ℇ {rest0.nextlist=rest0.inNextlist}
stmt⟶loc=expr	; {if(loc.offset=null)
emit( ‘=,’ expr.place	‘,	- ,’	loc.place);
else	
emit(‘[]=,’ expr.place	‘,	- ,’ loc.place	‘[’ loc.offset	‘]’ );
stmt.nextlist=makelist()}
stmt⟶if(bool)	m1 stmt1 n else m2 stmt2 {backpatch(bool.truelist,	m1.quad);
backpatch(bool.falselist,	m2.quad);
stmt.nextlist=
merge(stmt1.nextlist,	n.nextlist,	m2.nextlist)}
stmt⟶ while(m1 bool)	m2 stmt1 {backpatch(stmt1.nextlist,	m1.quad);
backpatch(bool.truelist,	m2.quad);
stmt.nextlist=bool.falselist;
emit(	‘j,	-,	-,	’ m1.quad)}
m⟶ℇ {m.quad=nextquad}
n⟶ℇ {n.nextlist=makelist(nextquad);
emit(	‘j,	-,	-,	0’)}
loc⟶id
					 resta
{resta.inArray=id.place}
{loc.place=resta.place;
loc.offset=resta.offset}
resta⟶ [
			 elist
			 ]
{elist.inArray=resta.inArray}
{resta.place=newtemp();
emit(‘-,’ elist.arry	‘,’ C	‘,’ resta.place);
resta.offset=newtemp();
emit(‘*,	’ w	‘,’ elist.offset	‘,’ resta.offset);
}
resta⟶ ℇ {resta.place=resta.inArray;
resta.offset=null}
elist	⟶ expr	
			
			 rest1
{rest1.inArray=elist.inArray;
rest1.inNdim=1;
rest1.inPlace=expr.place}
{elist.array=rest1.array;
elist.offset=rest1.offset}
3
rest1⟶ ,	
	 	 expr	
				 rest11
{t=newtemp();
m=rest1.inNdim+1;
emit(‘*,’ rest1.inPlace	‘,’ limit(rest1.inarray,m)	‘,’ t);
emit(‘+,’ t	‘,’ expr.place	‘,’ t);
rest11.inArray=rest1.inArray;
rest11.inNdim=m;
rest11.inNplace=t}
{rest1.array=rest11.array;
rest1.offset=rest11.offset}
rest1⟶ ℇ {rest1.array=rest1.inArray;
rest1.offset=rest1.inPlace}
bool	⟶ equality {bool.truelist=equality.truelist
bool.falselist=equality.falselist	}
equality	⟶ rel	
	 	
	 	 rest4
{rest4.inTruelist=rel.truelist
rest4.inFalselist=rel.falselist}
{equality.truelist=rest4.truelist
equality.falselist=rest4.falselist}
rest4	⟶ ==	rel	rest41
rest4	⟶ !=	rel	rest41
rest4	⟶ ℇ {rest4.truelist=rest4.inTruelist
rest4.falselist=rest4.inFalselist}
rel	⟶ expr	
rop_expr
{rop_expr.inPlace=expr.place}
{rel.truelist=rop_expr.truelist
rel.falselist=rop_expr.falselist}
rop_expr	⟶ <expr {rop_expr.truelist=makelist(nextquad);
rop_expr.falselist=makelist(nextquad+1);
emit(‘j<,’	rop_expr.inPlace	‘,’ expr.place	‘,	-’);
emit(‘j,	-,	-,	-’)}
rop_expr	⟶ <=expr {rop_expr.truelist=makelist(nextquad);
rop_expr.falselist=makelist(nextquad+1);
emit(‘j<=,’	rop_expr.inPlace	‘,’	expr.place	‘,	-’);
emit(‘j,	-,	-,	-’)}
rop_expr	⟶ >expr {rop_expr.truelist=makelist(nextquad);
rop_expr.falselist=makelist(nextquad+1);
emit(‘j>,’	rop_expr.inPlace	‘,’	expr.place	‘,	-’);
emit(‘j,	-,	-,	-’)}
rop_expr	⟶ >=expr {rop_expr.truelist=makelist(nextquad);
rop_expr.falselist=makelist(nextquad+1);
emit(‘j>=,’	rop_expr.inPlace	‘,’	expr.place	‘,	-’);
emit(‘j,	-,	-,	-’)}
rop_expr	⟶ ℇ {rop_expr.truelist=makelist(nextquad);
rop_expr.falselist=makelist(nextquad+1);
emit(‘jnz,’ rop_expr.inPlace	‘,	-,	-’);
emit(‘j,	-,	-,	-’)}
4
expr	⟶ term
rest5
{rest5.in=term.place}
{expr.place=rest5.place}
rest5⟶ +term
				 rest51
{rest51.in=newtemp();
emit(‘+,’ rest5.in	‘,’ term.place	‘,’ rest51.in)}
{rest5.place	=rest51 .place}
rest5⟶ -term
rest51
{rest51.in=newtemp();
emit(‘-,’ rest5.in	‘,’ term.place	‘,’ rest51.in)}
{rest5.place	=rest51 .place}
rest5⟶ ℇ {rest5.place	=	rest5.in}
term⟶ unary
rest6
{rest6.in	=	unary.place}
{term.place	=	rest6.place}
rest6⟶ *unary
rest61
{rest61.in=newtemp();
emit(‘*,’ rest6.in	‘,’ unary.place	‘,’ rest61.in)}
{rest6.place	=	rest61 .place}
rest6⟶ /unary
rest61
{rest61.in=newtemp();
emit(‘/,’	rest6.in	‘,’	unary.place	‘,’	rest61.in)}
{rest6.place	=	rest61 .place}
rest6⟶ ℇ {rest6.place	=	rest6.in}
unary⟶ factor {unary.place	=	factor.place}
factor⟶ (expr) {factor.place	=	expr.place}
factor⟶loc {if(loc.offset=null)
factor.place	=	loc.place
else	{factor.place=newtemp();
emit(‘=[],’ loc.place	‘[’ loc.offset	‘]’ ‘,	-,’ factor.place	)}}
factor⟶num {factor.place	=	num.value}
